Stress - simple way to test your websocket server.
==================================================

This is a set of programs used to simulate load charge on a websocket server.

A simple server handles clients and send to each clients a message every 10s (this can
be configured). A client responsible to spawn and maintain connections to the server
and an agent responsible top retrieve states from the server.

How to use it:
==============
It's quite easy to use it;

First be sure all dependencies are installed (node, socket-io...) for that use the command:
   sahid@laptop:~/stress$ make
   ...

You can start the server by the command:
    sahid@laptop:~/stress$ node srv.js &
    [1] 5590
    Ready to handle requests on: 127.0.0.1:8080
    Ready to handle requests on: 127.0.0.1:8080
    Ready to handle requests on: 127.0.0.1:8080
    Ready to handle requests on: 127.0.0.1:8080

You can connect an agent by the command:
    sahid@laptop:~/stress$ node agent.js
    connections: 1
    open: 1
    closed: 0
    total mem(mb): 15923.2265625
    free mem(mb): 12747.8515625
    load avg: 0.29052734375, 0.29052734375, 0.29052734375
    cpu used: 4

You can connect a client by the command:
    sahid@laptop:~/stress$ node clt.js 
    Connections spawned: 100, Connections accepted: 100, Connections failed: 0.


Please report any bugs or inconsistent you can find :)


srv.js
======
The server accepte connections from clients and send every 10s (eg: -c)
a message.

sahid@laptop:~/stress$ node srv.js --help

  Usage: srv.js [options]

  Options:

    -h, --help          output usage information
    -V, --version       output the version number
    -c, --chunk-ms <n>  The time between each reponse. default:1000
    -p, --port <n>      The service this server handler. default:8080
    -h, --host <n>      The service this server handler. default:127.0.0.1
    -n, --num-cpus <n>  Set the number of cpu cores used. default:use system


clt.js
======
The client spawns connections to the server. To control the burst it is possible
to configure a bucket of connections spawned every bucket-ms.

sahid@laptop:~/stress$ node clt.js --help

  Usage: clt.js [options]

  Options:

    -h, --help             output usage information
    -V, --version          output the version number
    -c, --connections <n>  Number of connections
    -r, --retry-failed     Retry connection failed because of pool timeout.
    -b, --bucket-size <n>  Number of connection launched every "bucket-ms"
    -m, --bucket-ms <n>    Time to wait before to launch a bicket of connections
    -p, --port <n>         The service this server handler. default:8080
    -h, --host <n>         The service this server handler. default:127.0.0.1

agent.js
========
The agent is reponsible to collect informations from the server. Actuallay the
actual implementation is not really optimised and can consums resources (memory).
It is better to launch the agent just after the server is running to avoid long time
connection.

sahid@laptop:~/stress$ node agent.js --help

  Usage: agent.js [options]

  Options:

    -h, --help         output usage information
    -V, --version      output the version number
    -r, --refresh <n>  Refresh the data
    -p, --port <n>     The service this server handler. default:8080
    -h, --host <n>     The service this server handler. default:127.0.0.1


Notes
=====
  - The actual implementation of client use only one core so it is better
    to run several client with less connections.
  - There is a bug not resolved yet on socket.io-client
    when we try to open more thant 3000 connections. This bugs can appens on client.
    https://github.com/LearnBoost/socket.io-client/issues/442



Roadmap
=======
 - Implement cluster to the client.
 - Clean the code.
 - Imporove the agent.
 - Add more flexibility on the set of project.
 - Why not tu use a manager.